<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>Grinder - a simulator of random shotgun and amplicon sequence libraries</title>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<link rev="made" href="mailto:root@localhost" />
</head>

<body style="background-color: white">


<!-- INDEX BEGIN -->
<div name="index">
<p><a name="__index__"></a></p>

<ul>

	<li><a href="#name">NAME</a></li>
	<li><a href="#description">DESCRIPTION</a></li>
	<li><a href="#citation">CITATION</a></li>
	<li><a href="#version">VERSION</a></li>
	<li><a href="#author">AUTHOR</a></li>
	<li><a href="#installation">INSTALLATION</a></li>
	<li><a href="#running_grinder">RUNNING GRINDER</a></li>
	<li><a href="#reference_sequence_database">REFERENCE SEQUENCE DATABASE</a></li>
	<li><a href="#cli_examples">CLI EXAMPLES</a></li>
	<li><a href="#options">OPTIONS</a></li>
	<ul>

		<li><a href="#basic_parameters">Basic parameters</a></li>
		<li><a href="#advanced_shotgun_and_amplicon_parameters">Advanced shotgun and amplicon parameters</a></li>
		<li><a href="#aberrations_and_sequencing_errors">Aberrations and sequencing errors</a></li>
		<li><a href="#community_structure_and_diversity">Community structure and diversity</a></li>
		<li><a href="#miscellaneous">Miscellaneous</a></li>
	</ul>

	<li><a href="#api_examples">API EXAMPLES</a></li>
	<li><a href="#api_methods">API METHODS</a></li>
	<ul>

		<li><a href="#new">new</a></li>
		<li><a href="#next_lib">next_lib</a></li>
		<li><a href="#next_read">next_read</a></li>
		<li><a href="#get_random_seed">get_random_seed</a></li>
	</ul>

	<li><a href="#copyright">COPYRIGHT</a></li>
	<li><a href="#bugs">BUGS</a></li>
</ul>

<hr name="index" />
</div>
<!-- INDEX END -->

<p>
</p>
<h1><a name="name">NAME</a></h1>
<p>Grinder - a simulator of random shotgun and amplicon sequence libraries</p>
<p>
</p>
<hr />
<h1><a name="description">DESCRIPTION</a></h1>
<p>Grinder is a program to create artificial random shotgun and amplicon sequence
libraries based on reference sequences in a FASTA file. Features include:</p>
<ul>
<li>
<p>shotgun library or amplicon library</p>
</li>
<li>
<p>arbitrary read length distribution and number of reads</p>
</li>
<li>
<p>simulation of PCR and sequencing errors (chimeras, point mutations, homopolymers)</p>
</li>
<li>
<p>support for creating paired-end (mate pair) datasets</p>
</li>
<li>
<p>specific rank-abundance settings or manually given abundance for each genome</p>
</li>
<li>
<p>creation of datasets with a given richness (alpha diversity)</p>
</li>
<li>
<p>independent datasets can share a variable number of genomes (beta diversity)</p>
</li>
<li>
<p>modeling of the bias created by varying genome lengths or gene copy number</p>
</li>
<li>
<p>profile mechanism to store preferred options</p>
</li>
<li>
<p>API to automate the creation of a large number of simulated dataset</p>
</li>
</ul>
<p>Grinder can thus produce metagenomic, amplicon or shotgun sequence datasets
which can be used to test the accuracy of bioinformatic tools or help
decide between alternative sequencing methods in an experiment.</p>
<p>
</p>
<hr />
<h1><a name="citation">CITATION</a></h1>
<p>If you use Grinder in your research, please cite:</p>
<pre>
   Angly FE, Willner D, Prieto-Dav√≥ A, Edwards RA, Schmieder R, et al. (2009) The
   GAAS Metagenomic Tool and Its Estimations of Viral and Microbial Average Genome
   Size in Four Major Biomes. PLoS Comput Biol 5(12): e1000593.
   L&lt;<a href="http://dx.doi.org/10.1371/journal.pcbi.1000593&gt">http://dx.doi.org/10.1371/journal.pcbi.1000593&gt</a>;</pre>
<p>
</p>
<hr />
<h1><a name="version">VERSION</a></h1>
<p>0.3.6</p>
<p>
</p>
<hr />
<h1><a name="author">AUTHOR</a></h1>
<p>Florent Angly &lt;<a href="mailto:florent.angly@gmail.com">florent.angly@gmail.com</a>&gt;</p>
<p>
</p>
<hr />
<h1><a name="installation">INSTALLATION</a></h1>
<p>You need to install these dependencies first:</p>
<ul>
<li>
<p>Perl (<a href="http://www.perl.com/download.csp">http://www.perl.com/download.csp</a>)</p>
</li>
</ul>
<p>The following Perl modules are dependencies that will be installed automatically
for you:</p>
<ul>
<li>
<p>Bio::SeqIO (from Bioperl)</p>
</li>
<li>
<p>Bio::Seq::SimulatedRead (from Bioperl but included here because it is so recent)</p>
</li>
<li>
<p>Getopt::Euclid</p>
</li>
<li>
<p>Math::Random::MT::Perl</p>
</li>
</ul>
<p>To install Grinder globally on your system, run the following commands in a
terminal or command prompt:</p>
<p>On Linux, Unix, MacOS:</p>
<pre>
   perl Makefile.PL
   make
   make test</pre>
<p>And finally, with administrator privileges:</p>
<pre>
   make install</pre>
<p>On Windows, run the same commands but with nmake instead of make.</p>
<p>If you do not have administrator rights and want to install the module locally,
try something along these lines:</p>
<pre>
   perl Makefile.PL INSTALL_BASE=/home/fangly/bin/perl</pre>
<p>
</p>
<hr />
<h1><a name="running_grinder">RUNNING GRINDER</a></h1>
<p>After installation, you can run Grinder using a command-line interface (CLI) or
an application programming interface (API). To get the usage of the CLI, type:</p>
<pre>
  Grinder --help</pre>
<p>If you are interested in running Grinder from within other Perl programs, see
the documentation of the Grinder API:</p>
<pre>
  perldoc Grinder</pre>
<p>The 'utils' folder included in the Grinder package contains utilities:</p>
<dl>
<dt><strong><a name="average_genome_size" class="item">average genome size:</a></strong></dt>

<dd>
<p>This calculates the average genome size (in bp) of a simulated random library
produces by Grinder.</p>
</dd>
<dt><strong><a name="change_paired_read_orientation" class="item">change_paired_read_orientation:</a></strong></dt>

<dd>
<p>This reverses the orientation of each second mate-pair read (ID endind in /2)
in a FASTA file.</p>
</dd>
</dl>
<p>
</p>
<hr />
<h1><a name="reference_sequence_database">REFERENCE SEQUENCE DATABASE</a></h1>
<p>A variety of FASTA databases can be used as input for Grinder. For example, the
GreenGenes database (<a href="http://greengenes.lbl.gov/Download/Sequence_Data/Fasta_data_files/Isolated_named_strains_16S_aligned.fasta">http://greengenes.lbl.gov/Download/Sequence_Data/Fasta_data_files/Isolated_named_strains_16S_aligned.fasta</a>)
contains over 180,000 16S rRNA clone sequences from various species which would
be appropriate to produce a 16S amplicon dataset. A set of over 41,000 OTU
representative sequences and their affiliation in seven different taxonomic
sytems can also be used for the same purpose (<a href="http://greengenes.lbl.gov/Download/OTUs/gg_otus_6oct2010/rep_set/gg_97_otus_6oct2010.fasta">http://greengenes.lbl.gov/Download/OTUs/gg_otus_6oct2010/rep_set/gg_97_otus_6oct2010.fasta</a>
and <a href="http://greengenes.lbl.gov/Download/OTUs/gg_otus_6oct2010/taxonomies/">http://greengenes.lbl.gov/Download/OTUs/gg_otus_6oct2010/taxonomies/</a>).
While 16S rRNA is a popular gene, datasets containing any type of gene could be used
in the same fashion to generate simulated amplicon datasets, provided appropriate
primers are used.</p>
<p>The &gt;2,400 curated microbial genome sequences in the NCBI RefSeq collection
(<a href="ftp://ftp.ncbi.nih.gov/refseq/release/microbial/">ftp://ftp.ncbi.nih.gov/refseq/release/microbial/</a>) would also be suitable for
producing 16S rRNA simulated datasets (using the adequate primers). However, the
lower diversity of this database compared to the previous two makes it more
appropriate for producing artificial microbial metagenomes. Individual genomes
from this database are also very suitable for the simulation of single or
double-barreled shotgun libraries. Similarly, the RefSeq database contains
over 3,100 curated viral sequences (&lt;ftp://ftp.ncbi.nih.gov/refseq/release/viral/&gt;)
which can be used to produce artificial viral metagenomes.</p>
<p>Quite a few eukaryotic organisms have been sequenced and their genome and the
genes it contains can be the basis for simulating genomic and transcriptomic
(RNA-seq) datasets. For example, the human genome is available at
<a href="ftp://ftp.ncbi.nih.gov/refseq/H_sapiens/RefSeqGene/">ftp://ftp.ncbi.nih.gov/refseq/H_sapiens/RefSeqGene/</a> and its transcripts can be
downloaded from <a href="ftp://ftp.ncbi.nih.gov/refseq/H_sapiens/mRNA_Prot/human.rna.fna.gz">ftp://ftp.ncbi.nih.gov/refseq/H_sapiens/mRNA_Prot/human.rna.fna.gz</a></p>
<p>
</p>
<hr />
<h1><a name="cli_examples">CLI EXAMPLES</a></h1>
<ul>
<li>
<p>A shotgun library with a coverage of 0.1X</p>
<pre>
   Grinder -reference_file genomes.fna -coverage_fold 0.1</pre>
</li>
<li>
<p>Same thing but save the result files in a specific folder and with a specific name</p>
<pre>
   Grinder -reference_file genomes.fna -coverage_fold 0.1 -base_name my_name -output_dir my_dir</pre>
</li>
<li>
<p>A shotgun library with 1000 reads</p>
<pre>
   Grinder -reference_file genomes.fna -total_reads 1000</pre>
</li>
<li>
<p>A shotgun library where species are distributed according to a power law</p>
<pre>
   Grinder -reference_file genomes.fna -abundance_model powerlaw 0.1</pre>
</li>
<li>
<p>A shotgun library with 123 species</p>
<pre>
   Grinder -reference_file genomes.fna -diversity 123</pre>
</li>
<li>
<p>Two shotgun libraries that have 50% of the species in common</p>
<pre>
   Grinder -reference_file genomes.fna -num_libraries 2 -shared_perc 50</pre>
</li>
<li>
<p>A shotgun library where species relative abundances are manually specified</p>
<pre>
   Grinder -reference_file genomes.fna -abundance_file my_abundances.txt</pre>
</li>
<li>
<p>A shotgun library with Sanger reads</p>
<pre>
   Grinder -reference_file genomes.fna -read_dist 800 -mutation_dist 1.5 linear 2 -mutation_ratio 4</pre>
</li>
<li>
<p>A shotgun library with first-generation 454 reads</p>
<pre>
   Grinder -reference_file genomes.fna -read_dist 100 normal 10 -homopolymer_dist balzer</pre>
</li>
<li>
<p>A paired-end shotgun library (insert size normally distributed around 2.5 kbp
with 0.2 kbp standard deviation)</p>
<pre>
   Grinder -reference_file genomes.fna -insert_dist 2500 normal 200</pre>
</li>
<li>
<p>A 16S amplicon library</p>
<pre>
   Grinder -reference_file 16Sgenes.fna -forward_reverse 16Sprimers.fna -length_bias 0 -unidirectional 1</pre>
</li>
<li>
<p>The same amplicon library with 20% of chimeric reads</p>
<pre>
   Grinder -reference_file 16Sgenes.fna -forward_reverse 16Sprimers.fna -length_bias 0 -unidirectional 1 -chimera_perc 20</pre>
</li>
<li>
<p>Three 16S amplicon libraries with specified MIDs</p>
<pre>
   Grinder -reference_file 16Sgenes.fna -forward_reverse 16Sprimers.fna -length_bias 0 -unidirectional 1 -num_libraries 3 -multiplex_ids MIDs.fna</pre>
</li>
<li>
<p>Reading reference sequences from the standard input, which allows you to decompress FASTA files on the fly</p>
<pre>
   zcat microbial_db.fna.gz | Grinder -total_reads 100</pre>
</li>
</ul>
<p>
</p>
<hr />
<h1><a name="options">OPTIONS</a></h1>
<p>
</p>
<h2><a name="basic_parameters">Basic parameters</a></h2>
<dl>
<dt><strong><a name="rf_reference_file_reference_file_reference_file_gf_reference_file_genome_file_reference_file" class="item">-rf &lt;reference_file&gt; | -reference_file &lt;reference_file&gt; | -gf &lt;reference_file&gt; | -genome_file &lt;reference_file&gt;</a></strong></dt>

<dd>
<p>FASTA file that contains the input reference sequences (full genomes, 16S rRNA
genes, transcripts, ...) or '-' to read them from the standard input. See the
README file for examples of databases you can use and their location.
Default: reference_file.default</p>
</dd>
<dt><strong><a name="cf_coverage_fold_coverage_fold_coverage_fold" class="item">-cf &lt;coverage_fold&gt; | -coverage_fold &lt;coverage_fold&gt;</a></strong></dt>

<dd>
<p>Desired fold coverage of the input reference sequences (the output FASTA length divided
by the input FASTA length).
Default: coverage_fold.default x</p>
</dd>
<dt><strong><a name="tr_total_reads_total_reads_total_reads" class="item">-tr &lt;total_reads&gt; | -total_reads &lt;total_reads&gt;</a></strong></dt>

<dd>
<p>Number of shotgun or amplicon reads to generate for each library. Do not specify
this if you specify the coverage.</p>
</dd>
</dl>
<p>
</p>
<h2><a name="advanced_shotgun_and_amplicon_parameters">Advanced shotgun and amplicon parameters</a></h2>
<dl>
<dt><strong><a name="rd_read_dist_read_dist_read_dist" class="item">-rd &lt;read_dist&gt;... | -read_dist &lt;read_dist&gt;...</a></strong></dt>

<dd>
<p>Desired shotgun or amplicon read length distribution specified as:
   average length, distribution ('uniform' or 'normal') and standard deviation
Only the first element is required.
Examples:</p>
<pre>
  All sequences exactly 250 bp long: 250
  Uniform distribution around 100+-10 bp: 100 uniform 10
  Read normally distributed with an average of 800 and a standard deviation of 100
    bp: 800 normal 100</pre>
<p>Genomes smaller than the specified length are not used. Default: read_dist.default</p>
</dd>
<dt><strong><a name="id_insert_dist_insert_dist_insert_dist" class="item">-id &lt;insert_dist&gt;... | -insert_dist &lt;insert_dist&gt;...</a></strong></dt>

<dd>
<p>Create shotgun paired end reads (mate pairs) spanning the given insert length
(the reads are interior to the insert):
   0 : off,
   or: insert size distribution in bp, in the same format as the read length
       distribution (a typical value is 2,500 bp)
Two distinct reads are generated whether or not the mate pair overlaps.
Default: insert_dist.default</p>
</dd>
<dt><strong><a name="ec_exclude_chars_exclude_chars_exclude_chars" class="item">-ec &lt;exclude_chars&gt; | -exclude_chars &lt;exclude_chars&gt;</a></strong></dt>

<dd>
<p>Do not create reads containing any of the specified characters (case 
insensitive), e.g. 'N-' to prevent reads with gaps (-) or ambiguities (N).
Default: 'exclude_chars.default'</p>
</dd>
<dt><strong><a name="dc_delete_chars_delete_chars_delete_chars" class="item">-dc &lt;delete_chars&gt; | -delete_chars &lt;delete_chars&gt;</a></strong></dt>

<dd>
<p>Remove the specified characters from the reference sequences (case
insensitive), e.g. 'N-' to renove gaps (-) and ambiguities (N).
Default: delete_chars.default</p>
</dd>
<dt><strong><a name="fr_forward_reverse_forward_reverse_forward_reverse" class="item">-fr &lt;forward_reverse&gt; | -forward_reverse &lt;forward_reverse&gt;</a></strong></dt>

<dd>
<p>Use amplicon sequencing using the given forward and reverse PCR primer sequences
(in a FASTA file). It is recommended to use the &lt;length_bias&gt; and &lt;unidirectional&gt;
options to generate amplicon reads. To sequence from the forward strand
(&lt;unidirectional&gt; = 1), put the forward primer first and reverse primer second.
To sequence from the reverse strand, invert the primers in the FASTA file and
use &lt;unidirectional&gt; = -1. The second primer sequence in the FASTA file is always
optional. The sequences should use the IUPAC convention for degenerate residues.
Example: AAACTYAAAKGAATTGRCGG and ACGGGCGGTGTGTRC for the 926F and 1392R primers
respectively (primers that target the v6 to v9 region of the 16S rRNA gene).
Genome sequences that do not match the specified primers are excluded.</p>
</dd>
<dt><strong><a name="un_unidirectional_unidirectional_unidirectional" class="item">-un &lt;unidirectional&gt; | -unidirectional &lt;unidirectional&gt;</a></strong></dt>

<dd>
<p>Instead of producing reads bidirectionally, i.e. from the reference strand and
its reverse complement, proceed unidirectionally, i.e. from one strand only
(forward or reverse). Values: 0 (off), 1 (forward), -1 (reverse)
Default: unidirectional.default</p>
</dd>
<dt><strong><a name="lb_length_bias_length_bias_length_bias" class="item">-lb &lt;length_bias&gt; | -length_bias &lt;length_bias&gt;</a></strong></dt>

<dd>
<p>In shotgun libraries, sample species proportionally to their genome length:
at the same relative abundance, larger genomes contribute more reads than smaller
genomes. 0 = no, 1 = yes.
Default: length_bias.default</p>
</dd>
<dt><strong><a name="cb_copy_bias_copy_bias_copy_bias" class="item">-cb &lt;copy_bias&gt; | -copy_bias &lt;copy_bias&gt;</a></strong></dt>

<dd>
<p>In amplicon libraries, sample species proportionally to the number of copies of
the target gene: at equal relative abundance, genomes that have multiple copies
of the target gene contribute more amplicon reads than genomes that have a
single copy. Note: you should use full genomes in &lt;reference_file&gt; to make use
of this option. 0 = no, 1 = yes.
Default: copy_bias.default</p>
</dd>
</dl>
<p>
</p>
<h2><a name="aberrations_and_sequencing_errors">Aberrations and sequencing errors</a></h2>
<dl>
<dt><strong><a name="md_mutation_dist_mutation_dist_mutation_dist" class="item">-md &lt;mutation_dist&gt;... | -mutation_dist &lt;mutation_dist&gt;...</a></strong></dt>

<dd>
<p>Introduce sequencing errors in the reads, under the form of mutations
(substitutions, insertions and deletions) using a specified frequency
distribution:
   average probability (%),
   model (uniform, linear),
   value at 3' end (not applicable for uniform model).
For example, for Sanger-type errors, use:
   1.5 linear 2.
Default: mutation_dist.default</p>
</dd>
<dt><strong><a name="mr_mutation_ratio_mutation_ratio_mutation_ratio" class="item">-mr &lt;mutation_ratio&gt; | -mutation_ratio &lt;mutation_ratio&gt;</a></strong></dt>

<dd>
<p>Indicate the ratio of the number of substitutions to the number of indels
(insertions and deletions). For example, use 4 (4 substitutions for 1 indel)
for Sanger reads.
Default: mutation_ratio.default</p>
</dd>
<dt><strong><a name="hd_homopolymer_dist_homopolymer_dist_homopolymer_dist" class="item">-hd &lt;homopolymer_dist&gt; | -homopolymer_dist &lt;homopolymer_dist&gt;</a></strong></dt>

<dd>
<p>Introduce sequencing errors in the reads under the form of homopolymeric
stretches (e.g. AAA, CCCCC) using a specified model (n: homopolymer length).</p>
<pre>
  Margulies: N(n, 0.15 * n)             ,  Margulies et al. 2005.
  Richter  : N(n, 0.15 * sqrt(n))       ,  Richter et al. 2008.
  Balzer   : N(n, 0.03494 + n * 0.06856),  Balzer et al. 2010.</pre>
<p>Default: homopolymer_dist.default</p>
</dd>
<dt><strong><a name="cp_chimera_perc_chimera_perc_chimera_perc" class="item">-cp &lt;chimera_perc&gt; | -chimera_perc &lt;chimera_perc&gt;</a></strong></dt>

<dd>
<p>Specify the percent of reads in amplicon libraries that should be chimeric
sequences. The 'reference' field in the description of chimeric reads will
contain the ID of all the reference sequences forming the chimeric template. A
typical value is 10%. Default: chimera_perc.default %</p>
</dd>
</dl>
<p>
</p>
<h2><a name="community_structure_and_diversity">Community structure and diversity</a></h2>
<dl>
<dt><strong><a name="af_abundance_file_abundance_file_abundance_file" class="item">-af &lt;abundance_file&gt; | -abundance_file &lt;abundance_file&gt;</a></strong></dt>

<dd>
<p>Specify the relative abundance of the genomes manually in an input file. Each
line of the file should contain a sequence name and its relative abundance (%),
e.g. 'seqABC 82.1' or 'seqABC 82.1 10.2' if you are specifying 2 different
communities.</p>
</dd>
<dt><strong><a name="am_abundance_model_abundance_model_abundance_model" class="item">-am &lt;abundance_model&gt;... | -abundance_model &lt;abundance_model&gt;...</a></strong></dt>

<dd>
<p>Relative abundance model for the input genomes: uniform, linear, powerlaw,
logarithmic or exponential. The uniform and linear models do not require a
parameter, but the other models take a parameter in the range [0, infinity). If
this parameter is not specified, then it is randomly picked.
Examples:</p>
<pre>
  uniform distribution: uniform
  powerlaw distribution with parameter 0.1: powerlaw 0.1
  exponential distribution with automatically chosen parameter: exponential</pre>
<p>Default: abundance_model.default</p>
</dd>
<dt><strong><a name="nl_num_libraries_num_libraries_num_libraries" class="item">-nl &lt;num_libraries&gt; | -num_libraries &lt;num_libraries&gt;</a></strong></dt>

<dd>
<p>Number of independent libraries to create. Specify how diverse and similar they
should be with &lt;diversity&gt;, &lt;shared_perc&gt; and &lt;permuted_perc&gt;. Assign them
different MID tags with &lt;multiplex_mids&gt;.
Default: num_libraries.default</p>
</dd>
<dt><strong><a name="mi_multiplex_ids_multiplex_ids_multiplex_ids" class="item">-mi &lt;multiplex_ids&gt; | -multiplex_ids &lt;multiplex_ids&gt;</a></strong></dt>

<dd>
<p>Specify an optional FASTA file that contains multiplex sequence identifiers
(a.k.a MIDs or barcodes) to add to the sequences (one per library). The MIDs
are included in the length specified with the -read_dist option.</p>
</dd>
<dt><strong><a name="di_diversity_diversity_diversity" class="item">-di &lt;diversity&gt;... | -diversity &lt;diversity&gt;...</a></strong></dt>

<dd>
<p>Richness, or number of genomes to include in the shotgun libraries. Use 0 for
the maximum diversity possible (based on the number of reference sequences
available). Provide one value to make all libraries have the same diversity, or
one diversity value per library otherwise.
Default: diversity.default</p>
</dd>
<dt><strong><a name="sp_shared_perc_shared_perc_shared_perc" class="item">-sp &lt;shared_perc&gt; | -shared_perc &lt;shared_perc&gt;</a></strong></dt>

<dd>
<p>For multiple libraries, percent of genomes they should have in common (relative
to the diversity of the least diverse library).
Default: shared_perc.default %</p>
</dd>
<dt><strong><a name="pp_permuted_perc_permuted_perc_permuted_perc" class="item">-pp &lt;permuted_perc&gt; | -permuted_perc &lt;permuted_perc&gt;</a></strong></dt>

<dd>
<p>For multiple libraries, percent of the most-abundant genomes to permute in
rank-abundance.
Default: permuted_perc.default %</p>
</dd>
</dl>
<p>
</p>
<h2><a name="miscellaneous">Miscellaneous</a></h2>
<dl>
<dt><strong><a name="rs_random_seed_random_seed_random_seed" class="item">-rs &lt;random_seed&gt; | -random_seed &lt;random_seed&gt;</a></strong></dt>

<dd>
<p>Seed number to use for the pseudo-random number generator.</p>
</dd>
<dt><strong><a name="dt_desc_track_desc_track_desc_track" class="item">-dt &lt;desc_track&gt; | -desc_track &lt;desc_track&gt;</a></strong></dt>

<dd>
<p>Track read information (reference sequence, position, errors, ...) by writing
it in the read description.
Default: desc_track.default</p>
</dd>
<dt><strong><a name="ql_qual_levels_qual_levels_qual_levels" class="item">-ql &lt;qual_levels&gt;... | -qual_levels &lt;qual_levels&gt;...</a></strong></dt>

<dd>
<p>Generate very basic quality scores for the simulated reads. Good residues are
given a specified good score (e.g. 30) and residues that are the result of an
insertion or substitution are given a specified bad score (e.g. 10). Specify
first the good score and then the bad score on the command-line, e.g.: 30 10
Default: qual_levels.default</p>
</dd>
<dt><strong><a name="bn_base_name_base_name_base_name" class="item">-bn &lt;base_name&gt; | -base_name &lt;base_name&gt;</a></strong></dt>

<dd>
<p>Prefix of the output files.
Default: base_name.default</p>
</dd>
<dt><strong><a name="od_output_dir_output_dir_output_dir" class="item">-od &lt;output_dir&gt; | -output_dir &lt;output_dir&gt;</a></strong></dt>

<dd>
<p>Directory where the results should be written. This folder will be created if
needed.
Default: output_dir.default</p>
</dd>
<dt><strong><a name="pf_profile_file_profile_file_profile_file" class="item">-pf &lt;profile_file&gt; | -profile_file &lt;profile_file&gt;</a></strong></dt>

<dd>
<p>A file that contains Grinder arguments. This is useful if you use many options
or often use the same options. Lines with comments (#) are ignored. Consider the
profile file, 'simple_profile.txt':</p>
<pre>
  # A simple Grinder profile
  -read_dist 105 normal 12
  -total_reads 1000</pre>
<p>Running: Grinder -reference_file viral_genomes.fa -profile_file simple_profile.txt</p>
<p>Translates into: Grinder -reference_file viral_genomes.fa -read_dist 105 normal 12 -total_reads 1000</p>
<p>Note that the arguments specified in the profile should not be specified again on the command line.</p>
</dd>
</dl>
<p>
</p>
<hr />
<h1><a name="api_examples">API EXAMPLES</a></h1>
<pre>
  use Grinder;</pre>
<pre>
  # Set up a new factory (see the OPTIONS section for a complete list of parameters)
  my $factory = Grinder-&gt;new( -reference_file =&gt; 'genomes.fna' );</pre>
<pre>
  # Process all shotgun libraries requested
  while ( my $struct = $factory-&gt;next_lib ) {</pre>
<pre>
    # The ID and abundance of the 3rd most abundant genome in this community
    my $id = $struct-&gt;{ids}-&gt;[2];
    my $ab = $struct-&gt;{abs}-&gt;[2];</pre>
<pre>
    # Create shotgun reads
    while ( my $read = $factory-&gt;next_read) {</pre>
<pre>
      # The read is a Bioperl sequence object with these properties:
      my $read_id     = $read-&gt;id;     # read ID given by Grinder
      my $read_seq    = $read-&gt;seq;    # nucleotide sequence
      my $read_mid    = $read-&gt;mid;    # MID or tag attached to the read
      my $read_errors = $read-&gt;errors; # errors that the read contains
 
      # Where was the read taken from? The reference sequence refers to the
      # database sequence for shotgun libraries, amplicon obtained from the
      # database sequence, or could even be a chimeric sequence
      my $ref_id     = $read-&gt;reference-&gt;id; # ID of the reference sequence
      my $ref_start  = $read-&gt;start;         # start of the read on the reference
      my $ref_end    = $read-&gt;end;           # end of the read on the reference
      my $ref_strand = $read-&gt;strand;        # strand of the reference
      
    }
  }</pre>
<pre>
  # Similarly, for shotgun mate pairs
  my $factory = Grinder-&gt;new( -reference_file =&gt; 'genomes.fna',
                              -insert_dist    =&gt; 250            );
  while ( $factory-&gt;next_lib ) {
    while ( my $read = $factory-&gt;next_read ) {
      # The first read is the first mate of the mate pair
      # The second read is the second mate of the mate pair
      # The third read is the first mate of the next mate pair
      # ...
    }
  }</pre>
<pre>
  # To generate an amplicon library
  my $factory = Grinder-&gt;new( -reference_file  =&gt; 'genomes.fna',
                              -forward_reverse =&gt; '16Sgenes.fna',
                              -length_bias     =&gt; 0,
                              -unidirectional  =&gt; 1              );
  while ( $factory-&gt;next_lib ) {
    while ( my $read = $factory-&gt;next_read) {
      # ...
    }
  }</pre>
<p>
</p>
<hr />
<h1><a name="api_methods">API METHODS</a></h1>
<p>The rest of the documentation details the available Grinder API methods.</p>
<p>
</p>
<h2><a name="new">new</a></h2>
<p>Title   : new
Function: Create a new Grinder factory initialized with the passed arguments.
          Available parameters described in the OPTIONS section.
Usage   : my $factory = Grinder-&gt;new( -reference_file =&gt; 'genomes.fna' );
Returns : a new Grinder object</p>
<p>
</p>
<h2><a name="next_lib">next_lib</a></h2>
<p>Title   : next_lib
Function: Go to the next shotgun library to process.
Usage   : my $struct = $factory-&gt;next_lib;
Returns : Community structure to be used for this library, where $struct-&gt;{ids}
          is an array reference containing the IDs of the genome making up the
          community (sorted by decreasing relative abundance) and $struct-&gt;{abs}
          is an array reference of the genome abundances (in the same order as
          the IDs).</p>
<p>
</p>
<h2><a name="next_read">next_read</a></h2>
<p>Title   : next_read
Function: Create a amplicon or shotgun read  for the current library.
Usage   : my $read  = $factory-&gt;next_read; # for single read
          my $mate1 = $factory-&gt;next_read; # for mate pairs
          my $mate2 = $factory-&gt;next_read; 
Returns : A sequence represented as a Bio::Seq::SimulatedRead object</p>
<p>
</p>
<h2><a name="get_random_seed">get_random_seed</a></h2>
<p>Title   : get_random_seed
Function: Return the number used to seed the pseudo-random number generator
Usage   : my $seed = $factory-&gt;get_random_seed;
Returns : seed number</p>
<p>
</p>
<hr />
<h1><a name="copyright">COPYRIGHT</a></h1>
<p>Copyright 2009,2010,2011 Florent ANGLY &lt;<a href="mailto:florent.angly@gmail.com">florent.angly@gmail.com</a>&gt;</p>
<p>Grinder is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License (GPL) as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.
Grinder is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with Grinder.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</p>
<p>
</p>
<hr />
<h1><a name="bugs">BUGS</a></h1>
<p>All complex software has bugs lurking in it, and this program is no exception.
If you find a bug, please report it on the SourceForge Tracker for Grinder:
<a href="http://sourceforge.net/tracker/?group_id=244196&atid=1124737">http://sourceforge.net/tracker/</a></p>
<p>Bug reports, suggestions and patches are welcome. Grinder's code is developed
on Sourceforge (<a href="https://sourceforge.net/scm/?type=git&group_id=244196">https://sourceforge.net/scm/?type=git&group_id=244196</a>) and is
under Git revision control. To get started with a patch, do:</p>
<pre>
   git clone git://biogrinder.git.sourceforge.net/gitroot/biogrinder/biogrinder</pre>

</body>

</html>
